---
- name: 2. Host Provisioning Phase
  hosts: all
  gather_facts: false

  tasks:
    - name: Check OAK_STATUS for each inventory host
      shell: |
        echo $OAK_STATUS
      register: oak_status

    - name: Set host availability if not busy 
      set_fact:
        host_available: "{{ oak_status.stdout != 'busy' }}"
      when: oak_status.stdout is defined

    - name: Set host availability if OAK_STATUS is not set
      set_fact:
        host_available: true
      when: oak_status.stdout is not defined

    - name: Add host to available host list
      set_fact:
        available_hosts: "{{ available_hosts | default([]) + [inventory_hostname] }}"
      when: host_available
      delegate_facts: true


- name: 2. Host Provisioning Phase
  hosts: localhost
  vars:
    job_mapping:
      onedoc: "[SQ] 3. [1-DOC] Execution Phase"
      mdoc: "[SQ] 3. [M-DOC] Execution Phase"
      mdnc: "[SQ] 3. [MDNC] Execution Phase"
  tasks:
    - block:
        - name: Retrieve available hosts
          set_fact:
            available_hosts: "{{ hostvars | dict2items | selectattr('value.host_available', 'defined') | selectattr('value.host_available', 'eq', True) | map(attribute='key') | list }}"

        - name: List available hosts
          debug:
            msg: "Available hosts: {{ available_hosts }}"

        - name: Remove localhost from available hosts
          set_fact:
            available_hosts: "{{ available_hosts | difference(['localhost']) }}"

        - name: Execute the Python script with sudo and parameters
          command: >
            /usr/bin/python3 "{{ testbed_tmp_path }}"/utils/provisioning/hosts_provision.py "{{ testbed_tmp_path }}/{{ topologies_folder }}" "{{ available_hosts }}"
          register: result_output


        - name: Read the JSON file
          slurp:
            src: "{{ testbed_tmp_path }}/topologies/dispatch.json"
          register: json_content

        - name: Decode and parse the JSON content
          set_fact:
            runs: "{{ json_content['content'] | b64decode | from_json }}"


        - name: ℹ️ Topologies execution plan & node selected ℹ️
          ansible.builtin.debug:
            msg: "{{ result_output.stdout }}"
          ignore_errors: true
          when: result_output is defined

        - name: ⏳ Dispatch ONEDOC scenario topology jobs ⚙️
          awx.awx.workflow_launch:
            workflow_template: "{{ job_mapping['onedoc'] }}"
            extra_vars:
              input_data: "{{ item }}"
              testbed_tmp_path: "{{ testbed_tmp_path }}"
              oak_repo_version: "{{ oak_repo_branch }}"
              oak_repo_commit: "{{ oak_repo_commit }}"
            validate_certs: false
            controller_oauthtoken: "{{ token }}"
            wait: true
          loop: "{{ runs['onedoc'] }}"
          when: runs['onedoc'] is defined

        - name: ⏳ Dispatch MDOC scenario topology jobs ⚙️
          awx.awx.workflow_launch:
            workflow_template: "{{ job_mapping['mdoc'] }}"
            extra_vars:
              input_data: "{{ item }}"
              testbed_tmp_path: "{{ testbed_tmp_path }}"
              oak_repo_version: "{{ oak_repo_branch }}"
              oak_repo_commit: "{{ oak_repo_commit }}"
            validate_certs: false
            controller_oauthtoken: "{{ token }}"
            wait: true
          loop: "{{ runs['mdoc'] }}"
          when: runs['mdoc'] is defined

        - name: ⏳ Dispatch MDNC scenario topology jobs ⚙️
          awx.awx.workflow_launch:
            workflow_template: "{{ job_mapping['mdnc'] }}"
            extra_vars:
              input_data: "{{ item }}"
              testbed_tmp_path: "{{ testbed_tmp_path }}"
              oak_repo_version: "{{ oak_repo_branch }}"
              oak_repo_commit: "{{ oak_repo_commit }}"
              onedoc: false
              mdoc: false
            validate_certs: false
            controller_oauthtoken: "{{ token }}"
            wait: true
          loop: "{{ runs['mdnc'] }}"
          when: runs['mdnc'] is defined

    - rescue:
        - name: "Call unset-role-availability role for all available hosts"
          include_role:
            name: unset-role-availability
            apply:
              delegate_to: "{{ host }}"
          loop: "{{ available_hosts }}"
          loop_control:
            loop_var: host

        - name: Report failure to dispatch jobs
          fail:
            msg: "Failed to dispatch jobs"
