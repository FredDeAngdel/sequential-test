---
- name: 2. Host Provisioning Phase
  hosts: all
  gather_facts: false

  tasks:
    - name: Check OAK_STATUS for each inventory host
      shell: |
        echo $OAK_STATUS
      register: oak_status

    - name: Set host availability if not busy 
      set_fact:
        host_available: "{{ oak_status.stdout != 'busy' }}"
      when: oak_status.stdout is defined

    - name: Set host availability if OAK_STATUS is not set
      set_fact:
        host_available: true
      when: oak_status.stdout is not defined

    - name: Add host to available host list
      set_fact:
        available_hosts: "{{ available_hosts | default([]) + [inventory_hostname] }}"
      when: host_available
      delegate_facts: true


- name: 2. Host Provisioning Phase
  hosts: localhost
  vars:
    job_mapping:
      onedoc: "SQ_1DOC_DEPLOY"
      mdoc: "[SQ] 3. [M-DOC] Components Deploy"
      mdnc: "[SQ] 3. [MDNC] Components Deploy"
  tasks:
    - name: Retrieve available hosts
      set_fact:
        available_hosts: "{{ hostvars | dict2items | selectattr('value.host_available', 'defined') | selectattr('value.host_available', 'eq', True) | map(attribute='key') | list }}"

    - name: Execute the Python script with sudo and parameters
      command: >
        /usr/bin/python3 "{{ testbed_tmp_path }}"/utils/provisioning/hosts_provision.py "{{ testbed_tmp_path }}/{{ topologies_folder }}" "{{ available_hosts }}"
      register: result_output


    - name: Read the JSON file
      slurp:
        src: "{{ testbed_tmp_path }}/dispatch.json"
      register: json_content

    - name: Decode and parse the JSON content
      set_fact:
        runs: "{{ json_content['content'] | b64decode | from_json }}"

    - name: Dispatch onedoc jobs
      awx.awx.job_launch:
        job_template: "{{ job_mapping['onedoc'] }}"
        extra_vars:
          run_data: "{{ item }}"
        job_type: run
      loop: "{{ runs['onedoc'] }}"
      when: runs['onedoc'] is defined

    - name: Dispatch mdoc jobs
      awx.awx.job_launch:
        job_template: "{{ job_mapping['mdoc'] }}"
        extra_vars:
          run_data: "{{ item }}"
        job_type: run
      loop: "{{ runs['mdoc'] }}"
      when: runs['mdoc'] is defined

    - name: Dispatch mdnc jobs
      awx.awx.job_launch:
        job_template: "{{ job_mapping['mdnc'] }}"
        extra_vars:
          run_data: "{{ item }}"
        job_type: run
      loop: "{{ runs['mdnc'] }}"
      when: runs['mdnc'] is defined


    - name: (DEBUG)  Display the validation result
      ansible.builtin.debug:
        msg: "script_result is {{ result_output }}"

    - name: List available hosts
      debug:
        msg: "Available hosts: {{ available_hosts }}"

    - name: Requested VMs display
      debug:
        msg: "Total VMs: {{ requested_vms }}"

    - name: Set availability flag based on available hosts
      set_fact:
        enough_hosts: "{{ available_hosts | length >= requested_vms | int }}"

    - name: Availability failure
      fail:
        msg: "Not enough available hosts. Required: {{ requested_vms }}, Available: {{ available_hosts | length }}"
      when: not enough_hosts

    - name: Compute required hosts to tag as busy
      set_fact:
        hosts_to_tag_busy: "{{ available_hosts[:requested_vms | int] | list }}"

    - name: Tag the required number of available hosts as busy, setting OAK_STATUS
      when: enough_hosts
      delegate_to: "{{ item }}"
      become: true
      lineinfile:
        path: /etc/environment
        create: yes
        regexp: '^OAK_STATUS='
        line: 'OAK_STATUS=busy'
      with_items: "{{ hosts_to_tag_busy }}"

    - name: Store reserved_hosts group in stats
      set_fact:
        reserved_hosts: "{{ available_hosts[:requested_vms | int] | list }}"

    - name: Matching deploy strategy with reserved hosts
      set_stats:
        data:
          deploy_1doc: "{{ one_doc_enabled }}"
          together_root_cluster: "{{ together_root_cluster }}"
          num_clusters: "{{ num_clusters }}"
          num_nodes: "{{ num_nodes }}"
          topology_desc: "{{ topology_desc }}"
          requested_vms: "{{ requested_vms }}"
          reserved_hosts: "{{ reserved_hosts }}"

    - name: Assign hosts to groups based on the conditions
      set_stats:
        data:
          group_1doc: "{{ reserved_hosts[:1] if one_doc_enabled else [] }}"
          group_rc_together: "{{ reserved_hosts[:1] if not one_doc_enabled and together_root_cluster else [] }}"
          group_rc_workers: "{{ reserved_hosts[1:] if not one_doc_enabled and together_root_cluster else [] }}"
          group_root_full: "{{ reserved_hosts[:1] if not one_doc_enabled and not together_root_cluster else [] }}"
          group_clusters_full: "{{ reserved_hosts[1:(1 + (num_clusters | int))] if not one_doc_enabled and not together_root_cluster else [] }}"
          group_workers_full: "{{ reserved_hosts[(1 + (num_clusters | int)):(1 + (num_clusters | int) + (num_nodes | int))] if not one_doc_enabled and not together_root_cluster else [] }}"
